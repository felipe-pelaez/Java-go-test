definitions:
  domain.Product:
    properties:
      _id:
        type: string
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  web.ErrorResponse:
    properties:
      code:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    name: Nelson David Camacho Ovalle
  description: This is a sample server for a microservice template in ecosystem Java
    Spring Cloud and Go.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: ms-template-mongo-go
  version: 1.0.0
paths:
  /products:
    get:
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Product'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Save a product
      parameters:
      - description: Product to save
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Save a product
      tags:
      - Products
  /products/{id}:
    delete:
      description: Delete a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Products
    get:
      description: Get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - Products
    patch:
      consumes:
      - application/json
      description: Patch update a product (only the fields that are sent)
      parameters:
      - description: Product to patch
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Product'
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Patch update a product (only the fields that are sent)
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - Products
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
